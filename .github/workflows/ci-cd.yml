name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20'

jobs:
  # Code Quality and Testing
  test:
    name: Test and Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run validation
      run: npm run validate
      
    - name: Run tests
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For PRs, run tests without coverage thresholds
          npm run test
        else
          # For pushes to main, run with coverage
          npm run test:coverage
        fi
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: github.event_name == 'push'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          test-results/
        retention-days: 7

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      if: github.event_name == 'push'
      with:
        languages: typescript
        
  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 7
        
    - name: Verify build
      run: |
        echo "Build verification"
        ls -la dist/
        test -f dist/index.html
        test -f dist/assets/main-*.js || test -f dist/assets/index-*.js

  # Build and Push Docker Images
  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Build and push development image
      if: github.ref == 'refs/heads/develop'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.dev
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Zeabur
  deploy:
    name: Deploy to Zeabur
    runs-on: ubuntu-latest
    needs: docker
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'production')
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Zeabur CLI
      run: |
        curl -fsSL https://raw.githubusercontent.com/zeabur/cli/main/install.sh | bash
        echo "${{ secrets.ZEABUR_API_TOKEN }}" | zeabur auth login
        
    - name: Deploy to Zeabur
      id: deploy
      run: |
        # Get the latest image tag
        IMAGE_TAG="ghcr.io/${{ github.repository }}:main-${{ github.sha }}"
        
        # Deploy to Zeabur
        zeabur deploy \
          --project-id ${{ secrets.ZEABUR_PROJECT_ID }} \
          --service-name parallel-trail \
          --image "$IMAGE_TAG" \
          --env NODE_ENV=production \
          --env PORT=8080
          
        # Get deployment URL
        DEPLOY_URL=$(zeabur service get parallel-trail --project-id ${{ secrets.ZEABUR_PROJECT_ID }} --format json | jq -r '.url')
        echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
        
    - name: Comment deployment URL
      uses: actions/github-script@v7
      with:
        script: |
          const url = '${{ steps.deploy.outputs.url }}';
          const comment = `ðŸš€ **Deployment Successful!**\n\nâœ… Application deployed to: ${url}\n\n**Environment**: Production\n**Commit**: ${context.sha.substring(0, 7)}\n**Deployed at**: ${new Date().toISOString()}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'staging')
    environment: 
      name: staging
      url: ${{ steps.deploy-staging.outputs.url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Zeabur CLI
      run: |
        curl -fsSL https://raw.githubusercontent.com/zeabur/cli/main/install.sh | bash
        echo "${{ secrets.ZEABUR_API_TOKEN }}" | zeabur auth login
        
    - name: Deploy to staging
      id: deploy-staging
      run: |
        IMAGE_TAG="ghcr.io/${{ github.repository }}:dev"
        
        zeabur deploy \
          --project-id ${{ secrets.ZEABUR_STAGING_PROJECT_ID }} \
          --service-name parallel-trail-staging \
          --image "$IMAGE_TAG" \
          --env NODE_ENV=staging \
          --env PORT=8080
          
        STAGING_URL=$(zeabur service get parallel-trail-staging --project-id ${{ secrets.ZEABUR_STAGING_PROJECT_ID }} --format json | jq -r '.url')
        echo "url=$STAGING_URL" >> $GITHUB_OUTPUT

  # Cleanup old images (conditional - only runs when container images exist)
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy, deploy-staging]
    if: always() && github.event_name == 'push'
    continue-on-error: true
    
    steps:
    - name: Check if container images exist
      id: check-images
      run: |
        # Check if package exists in GitHub Container Registry
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/users/${{ github.repository_owner }}/packages/container/${{ env.IMAGE_NAME }}/versions")
        
        if [ "$RESPONSE" = "200" ]; then
          echo "images_exist=true" >> $GITHUB_OUTPUT
        else
          echo "images_exist=false" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true
      
    - name: Delete old container images
      if: steps.check-images.outputs.images_exist == 'true'
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}
        package-type: container
        min-versions-to-keep: 5
        delete-only-untagged-versions: true
        num-old-versions-to-delete: 1
        token: ${{ secrets.GITHUB_TOKEN }}